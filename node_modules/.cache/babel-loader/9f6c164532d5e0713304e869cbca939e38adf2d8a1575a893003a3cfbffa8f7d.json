{"ast":null,"code":"var _jsxFileName = \"/Users/joshuajong/Desktop/joshuajong.github.io/src/pages/Thoughts.jsx\";\nimport React from 'react';\nimport Post from '../components/Post.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Thoughts() {\n  const posts = [{\n    title: 'Introduction to React',\n    preview: 'React is a JavaScript library...',\n    datePosted: 'August 10, 2023',\n    writtenBy: 'John Doe',\n    link: 'https://www.google.com'\n  }, {\n    title: 'Introduction to React',\n    preview: 'React is a JavaScript library...',\n    datePosted: 'August 10, 2023',\n    writtenBy: 'John Doe',\n    link: 'https://www.google.com'\n  }, {\n    title: 'Introduction to React',\n    preview: 'React is a JavaScript library...',\n    datePosted: 'August 10, 2023',\n    writtenBy: 'John Doe',\n    link: 'https://www.google.com'\n  }, {\n    title: 'Introduction to React',\n    preview: 'React is a JavaScript library...',\n    datePosted: 'August 10, 2023',\n    writtenBy: 'John Doe',\n    link: 'https://www.google.com'\n  }, {\n    title: 'Introduction to React',\n    preview: 'React is a JavaScript library...',\n    datePosted: 'August 10, 2023',\n    writtenBy: 'John Doe',\n    link: 'https://www.google.com'\n  }, {\n    title: 'Introduction to React',\n    preview: 'React is a JavaScript library...',\n    datePosted: 'August 10, 2023',\n    writtenBy: 'John Doe',\n    link: 'https://www.google.com'\n  }];\n  const addTask = async () => {\n    try {\n      // Define the task data you want to send to your backend\n      const newTask = 'New Task Title';\n\n      // Send a POST request to your Rust backend\n      const response = await fetch('http://localhost:8000/addtask', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newTask)\n      });\n      if (response.ok) {\n        // Task added successfully, you can handle the response if needed\n        console.log('Task added successfully');\n      } else {\n        // Handle the error response from the backend\n        console.error('Failed to add task');\n      }\n    } catch (error) {\n      console.error('Error adding task:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex flex-col items-center bg-white text-slate-900 p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-16\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl md:text-3xl lg:text-6xl\",\n        children: \"thoughts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-2 gap-8 md:gap-12 lg:gap-16\",\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(Post, {\n        title: post.title,\n        datePosted: post.datePosted,\n        link: post.link,\n        preview: post.preview,\n        writtenBy: post.writtenBy\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addTask,\n        className: \"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\",\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_c = Thoughts;\nexport default Thoughts;\nvar _c;\n$RefreshReg$(_c, \"Thoughts\");","map":{"version":3,"names":["React","Post","jsxDEV","_jsxDEV","Thoughts","posts","title","preview","datePosted","writtenBy","link","addTask","newTask","response","fetch","method","headers","body","JSON","stringify","ok","console","log","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","index","onClick","_c","$RefreshReg$"],"sources":["/Users/joshuajong/Desktop/joshuajong.github.io/src/pages/Thoughts.jsx"],"sourcesContent":["import React from 'react';\nimport Post from '../components/Post.jsx';\n\nfunction Thoughts() {\n  const posts = [\n    {\n      title: 'Introduction to React',\n      preview: 'React is a JavaScript library...',\n      datePosted: 'August 10, 2023',\n      writtenBy: 'John Doe',\n      link: 'https://www.google.com',\n    },\n    {\n      title: 'Introduction to React',\n      preview: 'React is a JavaScript library...',\n      datePosted: 'August 10, 2023',\n      writtenBy: 'John Doe',\n      link: 'https://www.google.com',\n    },\n    {\n      title: 'Introduction to React',\n      preview: 'React is a JavaScript library...',\n      datePosted: 'August 10, 2023',\n      writtenBy: 'John Doe',\n      link: 'https://www.google.com',\n    },\n    {\n      title: 'Introduction to React',\n      preview: 'React is a JavaScript library...',\n      datePosted: 'August 10, 2023',\n      writtenBy: 'John Doe',\n      link: 'https://www.google.com',\n    },\n    {\n      title: 'Introduction to React',\n      preview: 'React is a JavaScript library...',\n      datePosted: 'August 10, 2023',\n      writtenBy: 'John Doe',\n      link: 'https://www.google.com',\n    },\n    {\n      title: 'Introduction to React',\n      preview: 'React is a JavaScript library...',\n      datePosted: 'August 10, 2023',\n      writtenBy: 'John Doe',\n      link: 'https://www.google.com',\n    }\n  ]\n\n  const addTask = async () => {\n    try {\n      // Define the task data you want to send to your backend\n      const newTask = 'New Task Title';\n\n      // Send a POST request to your Rust backend\n      const response = await fetch('http://localhost:8000/addtask', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(newTask),\n      });\n\n      if (response.ok) {\n        // Task added successfully, you can handle the response if needed\n        console.log('Task added successfully');\n      } else {\n        // Handle the error response from the backend\n        console.error('Failed to add task');\n      }\n    } catch (error) {\n      console.error('Error adding task:', error);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center bg-white text-slate-900 p-4\">\n      <div className=\"mb-16\">\n        <h1 className=\"text-2xl md:text-3xl lg:text-6xl\">thoughts</h1>\n      </div>\n      <div className=\"grid grid-cols-2 gap-8 md:gap-12 lg:gap-16\">\n        {posts.map((post, index) => (\n          <Post\n            key={ index }\n            title={ post.title }\n            datePosted={ post.datePosted }\n            link={ post.link }\n            preview={ post.preview }\n            writtenBy={ post.writtenBy }\n          />\n        ))}\n      </div>\n      <div className=\"mt-4\">\n        {/* Add Task Button */}\n        <button\n          onClick={addTask}\n          className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\n        >\n          Add Task\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Thoughts;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}